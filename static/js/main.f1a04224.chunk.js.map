{"version":3,"sources":["utils/index.js","components/button/index.jsx","constants/index.js","components/keyboard/index.jsx","components/logo/index.jsx","components/display/index.jsx","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","handleKeyPress","displayValue","setDisplayValue","event","target","id","slice","eval","_unused","Button","props","react_default","a","createElement","disabled","type","className","onClick","children","keys","Keyboard","map","key","components_button","onKeyPress","Logo","Display","components_logo","App","_useState","useState","_useState2","Object","slicedToArray","components_display","components_keyboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kIAAAA,oBAAAC,EAAAC,oBAAA,sBAAAC,iBAAO,IAAMA,eAAiB,SAAjBA,eAAkBC,aAAcC,iBAAf,OAAmC,SAAAC,OAC/D,GAAwB,OAApBA,MAAMC,OAAOC,GACfH,gBAAgB,SACX,GAAwB,MAApBC,MAAMC,OAAOC,GACtBH,gBAAgBD,aAAaK,MAAM,GAAI,SAClC,GAAwB,MAApBH,MAAMC,OAAOC,GACtB,IACEH,gBAAgBK,KAAKN,eACrB,MAAAO,SACAN,gBAAgB,cAGlBA,gBAAgBD,aAAeE,MAAMC,OAAOC,iPCGjCI,eAZA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UACEC,SAAUJ,EAAMI,SAChBC,KAAML,EAAMK,KACZC,UAAWN,EAAMM,UACjBC,QAASP,EAAMO,QACfZ,GAAIK,EAAML,IAETK,EAAMQ,YCXEC,SAAO,CAClB,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MCEaC,EAjBE,SAAAV,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACZG,EAAKE,IAAI,SAAAC,GAAG,OACXX,EAAAC,EAAAC,cAACU,EAAD,CACED,IAAKA,EACLP,KAAK,SACLC,UAAU,MACVF,SAAkB,OAARQ,GAAuC,UAAvBZ,EAAMT,aAChCgB,QAASP,EAAMc,WACfnB,GAAIiB,GAEHA,OCXMG,eAFF,SAAAf,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WCQtBU,EAPC,SAAAhB,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAACc,EAAD,MACCjB,EAAMT,cAAgB,aCcZ2B,MAff,WAAe,IAAAC,EAC2BC,mBAAS,IADpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN5B,EADM8B,EAAA,GACQ7B,EADR6B,EAAA,GAIb,OACEpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACqB,EAAD,CAASjC,aAAcA,IACvBU,EAAAC,EAAAC,cAACsB,EAAD,CACElC,aAAcA,EACduB,WAAYxB,YAAeC,EAAcC,OCH7BkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f1a04224.chunk.js","sourcesContent":["export const handleKeyPress = (displayValue, setDisplayValue) => event => {\r\n  if (event.target.id === \"CE\") {\r\n    setDisplayValue(\"\");\r\n  } else if (event.target.id === \"C\") {\r\n    setDisplayValue(displayValue.slice(0, -1));\r\n  } else if (event.target.id === \"=\") {\r\n    try {\r\n      setDisplayValue(eval(displayValue));\r\n    } catch {\r\n      setDisplayValue(\"Error\");\r\n    }\r\n  } else {\r\n    setDisplayValue(displayValue + event.target.id);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = props => (\r\n  <button\r\n    disabled={props.disabled}\r\n    type={props.type}\r\n    className={props.className}\r\n    onClick={props.onClick}\r\n    id={props.id}\r\n  >\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","export const keys = [\r\n  \"(\",\r\n  \"CE\",\r\n  \")\",\r\n  \"C\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"/\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"*\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"-\",\r\n  \".\",\r\n  \"0\",\r\n  \"=\",\r\n  \"+\"\r\n];\r\n","import React from \"react\";\r\nimport Button from \"../button\";\r\nimport \"./keyboard.css\";\r\nimport { keys } from \"../../constants\";\r\n\r\nconst Keyboard = props => (\r\n  <div className=\"keyboard\">\r\n    {keys.map(key => (\r\n      <Button\r\n        key={key}\r\n        type=\"submit\"\r\n        className=\"key\"\r\n        disabled={key !== \"CE\" && props.displayValue === \"Error\"}\r\n        onClick={props.onKeyPress}\r\n        id={key}\r\n      >\r\n        {key}\r\n      </Button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Keyboard;\r\n","import React from \"react\";\r\nimport \"./logo.css\";\r\n\r\nconst Logo = props => <div className=\"logo\" />;\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport \"./display.css\";\r\nimport Logo from \"../logo\";\r\n\r\nconst Display = props => (\r\n  <div className=\"display\">\r\n    <Logo />\r\n    {props.displayValue || \"0\"}\r\n  </div>\r\n);\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Keyboard from \"./components/keyboard\";\nimport Display from \"./components/display\";\nimport { handleKeyPress } from \"./utils\";\n\nfunction App() {\n  const [displayValue, setDisplayValue] = useState(\"\");\n  // handleKeyPress();\n\n  return (\n    <div className=\"App\">\n      <Display displayValue={displayValue} />\n      <Keyboard\n        displayValue={displayValue}\n        onKeyPress={handleKeyPress(displayValue, setDisplayValue)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}